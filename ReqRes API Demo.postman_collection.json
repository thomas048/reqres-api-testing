{
	"info": {
		"_postman_id": "172c96e5-1823-4541-8c83-64d97b2103a8",
		"name": "ReqRes API Demo",
		"description": "A collection for testing the reqres.in API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29866392"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('page');\r",
									"    pm.expect(jsonData).to.have.property('per_page');\r",
									"    pm.expect(jsonData).to.have.property('total');\r",
									"    pm.expect(jsonData).to.have.property('total_pages');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData).to.have.property('support');\r",
									"});\r",
									"\r",
									"// Test data content\r",
									"pm.test(\"User data contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.data.length > 0) {\r",
									"        pm.expect(jsonData.data[0]).to.have.property('id');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('email');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('first_name');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('last_name');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('avatar');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test pagination parameters\r",
									"pm.test(\"Pagination parameters are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var page = Number(pm.request.url.query.get(\"page\") || 1);\r",
									"    pm.expect(jsonData.page).to.eql(page);\r",
									"});\r",
									"\r",
									"// Save user ID for future requests\r",
									"if (pm.response.json().data.length > 0) {\r",
									"    pm.environment.set(\"userId\", pm.response.json().data[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('support');\r",
									"});\r",
									"\r",
									"// Test user data\r",
									"pm.test(\"User data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var userId = pm.request.url.path[pm.request.url.path.length - 1];\r",
									"    \r",
									"    pm.expect(jsonData.data).to.have.property('id', Number(userId));\r",
									"    pm.expect(jsonData.data).to.have.property('email');\r",
									"    pm.expect(jsonData.data).to.have.property('first_name');\r",
									"    pm.expect(jsonData.data).to.have.property('last_name');\r",
									"    pm.expect(jsonData.data).to.have.property('avatar');\r",
									"});\r",
									"\r",
									"// Validate email format\r",
									"pm.test(\"Email format is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(emailRegex.test(jsonData.data.email)).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate avatar URL format\r",
									"pm.test(\"Avatar URL format is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var urlRegex = /^(http|https):\\/\\/[^ \"]+$/;\r",
									"    pm.expect(urlRegex.test(jsonData.data.avatar)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test response is an empty object\r",
									"pm.test(\"Response is an empty object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});\r",
									"\r",
									"// Test response content type\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('job');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('createdAt');\r",
									"});\r",
									"\r",
									"// Test that response data matches request data\r",
									"pm.test(\"Response data matches request data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
									"    pm.expect(jsonData.job).to.eql(requestData.job);\r",
									"});\r",
									"\r",
									"// Validate createdAt is a valid ISO date format\r",
									"pm.test(\"createdAt is a valid ISO date format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(dateRegex.test(jsonData.createdAt)).to.be.true;\r",
									"});\r",
									"\r",
									"// Save created user ID for future requests\r",
									"pm.environment.set(\"createdUserId\", pm.response.json().id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"job\": \"Software Engineer\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (PUT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('job');\r",
									"    pm.expect(jsonData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"// Test response data matches request data\r",
									"pm.test(\"Response data matches request data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
									"    pm.expect(jsonData.job).to.eql(requestData.job);\r",
									"});\r",
									"\r",
									"// Validate updatedAt is a valid ISO date format\r",
									"pm.test(\"updatedAt is a valid ISO date format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(dateRegex.test(jsonData.updatedAt)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe Updated\",\n    \"job\": \"Senior Developer\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('job');\r",
									"    pm.expect(jsonData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"// Test response data matches request data\r",
									"pm.test(\"Response data matches request data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    // Only test fields provided in the request\r",
									"    for (var prop in requestData) {\r",
									"        pm.expect(jsonData[prop]).to.eql(requestData[prop]);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Validate updatedAt is a valid ISO date format\r",
									"pm.test(\"updatedAt is a valid ISO date format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/;\r",
									"    pm.expect(dateRegex.test(jsonData.updatedAt)).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate the difference between PATCH and PUT (PATCH should only update provided fields)\r",
									"pm.test(\"PATCH should only update provided fields\", function() {\r",
									"    // Since reqres.in is a mock API, it always returns all requested fields\r",
									"    // But in a real scenario, PATCH should only update provided fields\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestData = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    for (var prop in requestData) {\r",
									"        pm.expect(jsonData).to.have.property(prop);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe Patched\",\n    \"job\": \"Technical Lead\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test response body is empty\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Clean up environment variable\r",
									"if (pm.environment.has(\"createdUserId\")) {\r",
									"    pm.environment.unset(\"createdUserId\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "Get Resources List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('page');\r",
									"    pm.expect(jsonData).to.have.property('per_page');\r",
									"    pm.expect(jsonData).to.have.property('total');\r",
									"    pm.expect(jsonData).to.have.property('total_pages');\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData).to.have.property('support');\r",
									"});\r",
									"\r",
									"// Test resource data\r",
									"pm.test(\"Resource data contains required fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData.data.length > 0) {\r",
									"        pm.expect(jsonData.data[0]).to.have.property('id');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('name');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('year');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('color');\r",
									"        pm.expect(jsonData.data[0]).to.have.property('pantone_value');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Save resource ID for future requests\r",
									"if (pm.response.json().data.length > 0) {\r",
									"    pm.environment.set(\"resourceId\", pm.response.json().data[0].id);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData).to.have.property('support');\r",
									"});\r",
									"\r",
									"// Test resource data\r",
									"pm.test(\"Resource data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var resourceId = pm.request.url.path[pm.request.url.path.length - 1];\r",
									"    \r",
									"    pm.expect(jsonData.data).to.have.property('id', Number(resourceId));\r",
									"    pm.expect(jsonData.data).to.have.property('name');\r",
									"    pm.expect(jsonData.data).to.have.property('year');\r",
									"    pm.expect(jsonData.data).to.have.property('color');\r",
									"    pm.expect(jsonData.data).to.have.property('pantone_value');\r",
									"});\r",
									"\r",
									"// Validate color format\r",
									"pm.test(\"Color format is valid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var colorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\r",
									"    pm.expect(colorRegex.test(jsonData.data.color)).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate year is a valid number\r",
									"pm.test(\"Year is a valid number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.year).to.be.at.least(1900);\r",
									"    pm.expect(jsonData.data.year).to.be.at.most(new Date().getFullYear());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Resource (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test response is an empty object\r",
									"pm.test(\"Response is an empty object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown",
								"23"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"\r",
									"// Validate token is not empty\r",
									"pm.test(\"Token is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Save token for future requests\r",
									"pm.environment.set(\"authToken\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register - Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test error message\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Check specific error message\r",
									"pm.test(\"Error message indicates missing password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.include('password');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sydney@fife\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"\r",
									"// Validate token is not empty\r",
									"pm.test(\"Token is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Save token for future requests\r",
									"pm.environment.set(\"authToken\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test error message\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Check specific error message\r",
									"pm.test(\"Error message indicates missing password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.include('password');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"peter@klaven\"\n}"
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test response structure\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('page');\r",
							"    pm.expect(jsonData).to.have.property('per_page');\r",
							"    pm.expect(jsonData).to.have.property('total');\r",
							"    pm.expect(jsonData).to.have.property('total_pages');\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test response time is greater than specified delay\r",
							"pm.test(\"Response time is greater than specified delay\", function () {\r",
							"    var delay = Number(pm.request.url.query.get(\"delay\")) * 1000; // Convert to milliseconds\r",
							"    pm.expect(pm.response.responseTime).to.be.at.least(delay);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?delay=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	]
}